import lostembers.fluf.gradle.FlufPlugin

import java.nio.file.Files

plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'eclipse'
}

gradlePlugin {
    plugins {
        flufGradle {
            id = 'lostembers.fluf.gradle'
            implementationClass = 'lostembers.fluf.gradle.FlufPlugin'
        }
    }
}

apply plugin: FlufPlugin

// Configure the extension using a DSL block

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://nexus.velocitypowered.com/repository/maven-public/" }
}

configurations {
    extraLibs
//    fluf
}

fluf {
    mappings = "mojmap"
    version = "1.18.2"
    // TODO
//    remapMCJarThreads = 42
//    remapModThreads = 16
}

dependencies {
    implementation gradleApi()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    extraLibs group: 'net.fabricmc', name: 'tiny-mappings-parser', version: '0.2.2.14'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-util
    extraLibs group: 'org.ow2.asm', name: 'asm-util', version: '9.3'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-commons
    extraLibs group: 'org.ow2.asm', name: 'asm-commons', version: '9.3'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-analysis
    extraLibs group: 'org.ow2.asm', name: 'asm-analysis', version: '9.3'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-tree
    extraLibs group: 'org.ow2.asm', name: 'asm-tree', version: '9.3'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    extraLibs group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    // https://mvnrepository.com/artifact/net.minecraftforge/forgeflower
    extraLibs group: 'net.minecraftforge', name: 'forgeflower', version: '1.5.498.22'

    configurations.api.extendsFrom(configurations.extraLibs)
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
        File f = new File("fluf_gradle/libs/").getAbsoluteFile()
        if (!f.exists()) {
            f.mkdirs()
        }
        configurations.extraLibs.collect {
            File f1 = new File("fluf_gradle/libs/" + it.name).getAbsoluteFile()
            System.out.println(f1)
            if (!f1.exists()) {
                Files.copy(it.toPath(), f1.toPath())
            }
        }
    }
    exclude 'module-info.class'
    exclude 'org.*'
}

//import org.gradle.plugins.ide.eclipse.model.*
//import org.gradle.plugins.ide.eclipse.model.internal.*
//
//import java.nio.file.Files
//
//project.extensions.eclipse.classpath.file.whenMerged { Classpath cp ->
//    def gradleSrc = gradle.gradleHomeDir.absolutePath.replace(File.separator, '/') + '/src/'
//    cp.entries.each { entry ->
//        if ((entry in AbstractLibrary) && entry.library.file.name.startsWith('gradle-')) {
//            def type = (entry.library.file.name =~ "^gradle(-(.*))?-(${gradle.gradleVersion})")[0][2]
//            if (type == 'api') type = 'core-api' //Gradle name is different for cores
//            if (type == '') type = 'core'
//            entry.sourcePath = new FileReferenceFactory().fromPath(gradleSrc + type)
//        }
//    }
//}

test {
    useJUnitPlatform()
}